log syslog {warning};
#debug protocols all;
mrtdump protocols all;

#router id $SECURE_ROUTER_IP;

ipv4 table $BIRD_TABLE_NAME;

function safe_import_from_clients(int client_asn) {
        if (bgp_path ~ [= client_asn+ =]) then {return true;}
        return false;
}

function safe_exchange_with_kernel() {
        if net ~ [$SECURE_PREFIX_LIST, $SECURE_SUBPREFIX] then {return true;}
        if source = RTS_BGP then {return true;}
        return false;
}

function safe_export_to_clients() {
        if net ~ [$SECURE_PREFIX_LIST] then {return true;}
        if source = RTS_BGP then {return true;}
        return false;
}

function safe_export_to_pops() {
        if net ~ [$SECURE_SUBPREFIX] then {return true;}
        if source = RTS_BGP then {return true;}
        return false;
}

template bgp iBGP_pop {
    local $SECURE_ROUTER_IP as $SBAS_ASN;
    ipv4 {
        table $BIRD_TABLE_NAME;
        import all;
        export filter {
            if (!safe_export_to_pops()) then {reject;}
            if ($SBAS_ASN, $INTERNAL_COMMUNITY) ~ bgp_community then {
                bgp_community.delete([($SBAS_ASN, $INTERNAL_COMMUNITY)]);
                bgp_community = -empty-;
                bgp_community.add(($SBAS_ASN,$PEER_COMMUNITY));
            }            
            accept;
        };
        next hop self;
    };
}

template bgp eBGP_client {
    local $SECURE_ROUTER_IP as $SBAS_ASN;
    ipv4 {
        table $BIRD_TABLE_NAME;
        import all;
        export filter {
            if (!safe_export_to_clients()) then {reject;}
            accept;
        };
    };
    multihop;
}

template bgp eBGP_global {
    local $SECURE_ROUTER_IP as $SBAS_ASN;
    ipv4 {
        table $BIRD_TABLE_NAME;
        import all;
        export filter {
            if (!safe_export_to_clients()) then {reject;}
            accept;
        };
    };
}

protocol device {
        scan time 10;
}

protocol direct {
        interface "*";
        ipv4 {
            table $BIRD_TABLE_NAME;
            import filter {
                if (!safe_exchange_with_kernel()) then {reject;}
                accept;
            };
        };
}

protocol kernel {
        kernel table $KERNEL_TABLE_NUMBER;
        ipv4 {
            table $BIRD_TABLE_NAME;
            import filter {
                if (!safe_exchange_with_kernel()) then {reject;}
                accept;
            };
            export filter {
                if (!safe_exchange_with_kernel()) then {reject;}
                accept;
            };
        };
        scan time 10;
        learn off;
        persist off;
        graceful restart on;
        #device routes off;
}

protocol mrt {
        table "$BIRD_TABLE_NAME";
        filename "$BIRD_MRTDUMP_DIR/%F_%T.mrt";
        period 600;
}                           
